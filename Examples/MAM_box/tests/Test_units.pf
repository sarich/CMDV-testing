module Test_units_mod
   use pfunit_mod
   
   use units
!    use shr_kind_mod, only: r8 => shr_kind_r8
!    use constituents, only: pcnst, cnst_name, cnst_get_ind
!    use modal_aero_data, only: ntot_amode
   
  !  ###### main
!    use shr_kind_mod,            only: r8 => shr_kind_r8
!    use abortutils,              only: endrun
!    use cam_history,             only: ncol_for_outfld
!    use cam_logfile,             only: iulog
!    use ppgrid,                  only: pcols, pver
!    use wv_saturation,           only: ncol_for_qsat
!    use modal_aero_data,         only: ntot_amode
!
!    ##### init
!
!    use shr_kind_mod, only: r8 => shr_kind_r8
!    use abortutils, only: endrun
!    use cam_logfile, only: iulog
!    use chem_mods, only: adv_mass, gas_pcnst, imozart
!    use mo_tracname, only: solsym
!    use ppgrid, only: pcols, pver
!    use physics_buffer, only: physics_buffer_desc, pbuf_init
!
!    use modal_aero_data, only: nbc, npoa, nsoa, nsoag
!    use modal_aero_initialize_data
!    use modal_aero_amicphys, only: mosaic
!    use modal_aero_calcsize, only: modal_aero_calcsize_reg
!    use modal_aero_wateruptake, only: modal_aero_wateruptake_reg, modal_aero_wateruptake_init
!
!    implicit none
!
!    public
!
!    integer, parameter :: lun_outfld = 90
!
!    integer :: mdo_gaschem, mdo_cloudchem
!    integer :: mdo_gasaerexch, mdo_rename, mdo_newnuc, mdo_coag
!    integer :: mopt_aero_comp, mopt_aero_load, mopt_ait_size
!    integer :: mopt_h2so4_uptake
!    integer :: i_cldy_sameas_clear
!    integer :: iwrite3x_species_flagaa, iwrite3x_units_flagaa
!    integer :: iwrite4x_heading_flagbb
!    real(r8) :: xopt_cloudf
!
!    ! in the multiple nbc/npoa code, the following are in modal_aero_data
!    integer :: lptr_bca_a_amode(ntot_amode) = -999888777
!    integer :: lptr_poma_a_amode(ntot_amode) = -999888777
!
!    integer :: species_class(pcnst) = -1
   
! What is this?
   public :: Setup
   

@TestCase
   type, extends(TestCase) :: mySetup
     
     integer :: mymin = 30, mymax = 100 , list_length=3 , value=0
     character(50) :: myname
     character(len=20) :: name_to_find
     character(len=20) , dimension(5):: list_of_names
     integer :: name_id
   
   contains
       procedure :: setUp     ! overides generic
       procedure :: tearDown  ! overrides generic
   end type mySetup

contains
  

   ! No need to annotate setUp() when _extending_ TestCase
  subroutine setUp(this)
      class (mySetup), intent(inout) :: this

      this%value = 6
      print * , "Setup in TestCase"

  end subroutine setUp

   ! No need to annotate tearDown() _extending_ TestCase
  subroutine tearDown(this)
      class (mySetup), intent(inout) :: this

      print * , "Clean up in TestCase"
  end subroutine tearDown

! TESTS

  @Before
     subroutine mySetupWhen()
        implicit none
        open(unit=10, file='testData.txt', form='formatted', access='sequential', status='new')
        write(10,'(a)')'record 1'
        write(10,'(a)')'record 2'
        rewind(10)
     end subroutine mySetupWhen

  @After
     subroutine myTearDowWhen()
        implicit none
        close(10, status='delete')
        print * , "After"
     end subroutine myTearDowWhen

@Test
  subroutine test_setup(this)
     ! Testing search_list_of_names
     ! Objective : check if existing name from list is found 
     class (mySetup), intent(inout) :: this
     print * , "Empty test"
  
  end subroutine test_setup
   
@Test
  subroutine test_getunit_ok(this)
      ! Testing search_list_of_names
      ! Objective : check if call returns false for empty name 
      class (mySetup), intent(inout) :: this
   
      integer :: returnValue
      returnValue = getunit()
      @assertEqual(returnValue, 6 , message="Testing getunit failed.")
  end subroutine test_getunit_ok




end module Test_units_mod




