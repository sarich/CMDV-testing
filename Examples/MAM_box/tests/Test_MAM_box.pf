module Test_MAM_box_mod
   use pfunit_mod
   
   use units
!    use shr_kind_mod, only: r8 => shr_kind_r8
!    use constituents, only: pcnst, cnst_name, cnst_get_ind
!    use modal_aero_data, only: ntot_amode
   
  !  ###### main
!    use shr_kind_mod,            only: r8 => shr_kind_r8
!    use abortutils,              only: endrun
!    use cam_history,             only: ncol_for_outfld
!    use cam_logfile,             only: iulog
!    use ppgrid,                  only: pcols, pver
!    use wv_saturation,           only: ncol_for_qsat
!    use modal_aero_data,         only: ntot_amode
!
!    ##### init
!
!    use shr_kind_mod, only: r8 => shr_kind_r8
!    use abortutils, only: endrun
!    use cam_logfile, only: iulog
!    use chem_mods, only: adv_mass, gas_pcnst, imozart
!    use mo_tracname, only: solsym
!    use ppgrid, only: pcols, pver
!    use physics_buffer, only: physics_buffer_desc, pbuf_init
!
!    use modal_aero_data, only: nbc, npoa, nsoa, nsoag
!    use modal_aero_initialize_data
!    use modal_aero_amicphys, only: mosaic
!    use modal_aero_calcsize, only: modal_aero_calcsize_reg
!    use modal_aero_wateruptake, only: modal_aero_wateruptake_reg, modal_aero_wateruptake_init
!
!    implicit none
!
!    public
!
!    integer, parameter :: lun_outfld = 90
!
!    integer :: mdo_gaschem, mdo_cloudchem
!    integer :: mdo_gasaerexch, mdo_rename, mdo_newnuc, mdo_coag
!    integer :: mopt_aero_comp, mopt_aero_load, mopt_ait_size
!    integer :: mopt_h2so4_uptake
!    integer :: i_cldy_sameas_clear
!    integer :: iwrite3x_species_flagaa, iwrite3x_units_flagaa
!    integer :: iwrite4x_heading_flagbb
!    real(r8) :: xopt_cloudf
!
!    ! in the multiple nbc/npoa code, the following are in modal_aero_data
!    integer :: lptr_bca_a_amode(ntot_amode) = -999888777
!    integer :: lptr_poma_a_amode(ntot_amode) = -999888777
!
!    integer :: species_class(pcnst) = -1
   
! What is this?
   public :: Setup
   

@TestCase
   type, extends(TestCase) :: mySetup
     
     ! Variable definitions 
     integer :: mymin = 30, mymax = 100 , list_length=3 , value=0
     character(50) :: myname
     character(len=20) :: name_to_find
     character(len=20) , dimension(5):: list_of_names
     integer :: name_id
   
   contains
       !procedure :: setUp     ! overides generic
       !procedure :: tearDown  ! overrides generic
   end type mySetup

contains
  

   ! No need to annotate setUp() when _extending_ TestCase
  subroutine setUp(this)
      class (mySetup), intent(inout) :: this

      this%value = 6
!       print * , "Setup in TestCase"

  end subroutine setUp

   ! No need to annotate tearDown() _extending_ TestCase
  subroutine tearDown(this)
      class (mySetup), intent(inout) :: this
      
!       print * , "Clean up in TestCase"
  end subroutine tearDown

! TESTS

  @Before
     subroutine mySetupWhen()
        implicit none
        open(unit=10, file='testData.txt', form='formatted', access='sequential', status='new')
        write(10,'(a)')'record 1'
        write(10,'(a)')'record 2'
        rewind(10)
        print * , "Before"
     end subroutine mySetupWhen

  @After
     subroutine myTearDownWhen()
        implicit none
        close(10, status='delete')
        print * , "After"
     end subroutine myTearDownWhen

@Test
  subroutine test_setup(this)
     ! Testing setup 
     ! Objective : check which setup is called
     class (mySetup), intent(inout) :: this
     print * , "Empty test"
  
  end subroutine test_setup
   
@Test
  subroutine test_getunit_ok(this)
      ! Testing units::getunit
      ! Objective : check if call returns 6
      class (mySetup), intent(inout) :: this
   
      integer :: returnValue
      returnValue = getunit()
      @assertEqual(returnValue, 6 , message="Testing getunit failed.")
  end subroutine test_getunit_ok

@Test
  subroutine test_cnst_get_ind(this)
    ! Testing constituents::cnst_get_ind
    ! Objective: ...
    use constituents, only: pcnst, cnst_name, cnst_get_ind
    
    class (mySetup), intent(inout) :: this
    
    
    ! What am I testing
    integer :: l_h2so4g, l_nh3g,  l_so2g, l_hno3g, l_hclg
    
    call cnst_get_ind( 'H2SO4', l_h2so4g, .false. )
    call cnst_get_ind( 'SO2',   l_so2g,   .false. )
    call cnst_get_ind( 'NH3',   l_nh3g,   .false. )
    call cnst_get_ind( 'HNO3',  l_hno3g,  .false. )
    call cnst_get_ind( 'HCL',   l_hclg,   .false. )
    
    print * , l_h2so4g, l_nh3g,  l_so2g, l_hno3g, l_hclg
    
    
  end subroutine test_cnst_get_ind

  @Test
  subroutine test_modal_aero_wateruptake_dr()
    use modal_aero_wateruptake
    
    ! load state
          state%lchnk = lchnk
          state%ncol = ncol
          state%t = t
          state%pmid = pmid
          state%pdel = pdel
          state%q = q
    ! load ptend
          ptend%lq = dotend
          ptend%q = dqdt
    ! load pbuf
          call load_pbuf( &
             ncol, nstop, deltat, t, pmid, pdel, zm, pblh, cld, relhum, qv, &
             q, qqcw, dgncur_a, dgncur_awet, qaerwat, wetdens        )

    ! call wateruptake
          call modal_aero_wateruptake_dr( state, pbuf )
          
  end subroutine test_modal_aero_wateruptake_dr

end module Test_MAM_box_mod




